
// Generated from SrslGrammar.g4 by ANTLR 4.11.1


#include "SrslGrammarLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SrslGrammarLexerStaticData final {
  SrslGrammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SrslGrammarLexerStaticData(const SrslGrammarLexerStaticData&) = delete;
  SrslGrammarLexerStaticData(SrslGrammarLexerStaticData&&) = delete;
  SrslGrammarLexerStaticData& operator=(const SrslGrammarLexerStaticData&) = delete;
  SrslGrammarLexerStaticData& operator=(SrslGrammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag srslgrammarlexerLexerOnceFlag;
SrslGrammarLexerStaticData *srslgrammarlexerLexerStaticData = nullptr;

void srslgrammarlexerLexerInitialize() {
  assert(srslgrammarlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SrslGrammarLexerStaticData>(
    std::vector<std::string>{
      "WS", "SBRACKO", "SBRACKC", "CBRACKO", "CBRACKC", "PARENO", "PARENC", 
      "CONST", "FOR", "WHILE", "IF", "ELSE", "ELSEIF", "RETURN", "CONTROL_FLOW", 
      "STRUCT", "SHADER_INPUT", "SHADER_OUTPUT", "TEST", "VECTOR_COMPONENT", 
      "TYPE", "TEXTURE_TYPES", "SAMPLER_TYPE", "CONSTANT_BUFFER", "SLOT", 
      "COMMENT", "MCOMMENT", "SHADER_TYPE_LIT", "SHADER_TYPE", "EOL", "COMMA", 
      "COLON", "FLOATING_POINT", "NUMBER", "ASSIGN", "DOT", "AT", "PLUS", 
      "MINUS", "MULTIPLY", "DIVIDE", "OPERATION", "CREMENT", "NOT", "VAR_NAME"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "'['", "']'", "'{'", "'}'", "'('", "')'", "'const'", "'for'", 
      "'while'", "'if'", "'else'", "'else if'", "'return'", "", "'struct'", 
      "'Input'", "'Output'", "'test'", "", "", "", "'Sampler'", "'ConstantBuffer'", 
      "'slot'", "", "", "'ShaderType = '", "", "';'", "','", "':'", "", 
      "", "'='", "'.'", "'@'", "'+'", "'-'", "'*'", "'/'", "", "", "'!'"
    },
    std::vector<std::string>{
      "", "WS", "SBRACKO", "SBRACKC", "CBRACKO", "CBRACKC", "PARENO", "PARENC", 
      "CONST", "FOR", "WHILE", "IF", "ELSE", "ELSEIF", "RETURN", "CONTROL_FLOW", 
      "STRUCT", "SHADER_INPUT", "SHADER_OUTPUT", "TEST", "VECTOR_COMPONENT", 
      "TYPE", "TEXTURE_TYPES", "SAMPLER_TYPE", "CONSTANT_BUFFER", "SLOT", 
      "COMMENT", "MCOMMENT", "SHADER_TYPE_LIT", "SHADER_TYPE", "EOL", "COMMA", 
      "COLON", "FLOATING_POINT", "NUMBER", "ASSIGN", "DOT", "AT", "PLUS", 
      "MINUS", "MULTIPLY", "DIVIDE", "OPERATION", "CREMENT", "NOT", "VAR_NAME"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,45,607,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,1,0,4,0,93,8,0,11,0,12,0,94,1,0,1,0,1,1,1,1,
  	1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
  	8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,170,8,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,3,20,209,8,20,1,20,1,20,3,20,213,8,20,1,
  	20,1,20,1,20,1,20,1,20,3,20,220,8,20,1,20,1,20,3,20,224,8,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,3,20,232,8,20,1,20,1,20,3,20,236,8,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,3,20,244,8,20,1,20,1,20,3,20,248,8,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,3,20,257,8,20,1,20,1,20,3,20,261,8,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,20,3,20,271,8,20,1,20,1,20,3,20,275,8,20,3,20,
  	277,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	3,21,375,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
  	1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,409,8,25,10,25,12,25,412,9,25,
  	1,25,1,25,1,26,1,26,1,26,1,26,5,26,420,8,26,10,26,12,26,423,9,26,1,26,
  	1,26,5,26,427,8,26,10,26,12,26,430,9,26,1,26,5,26,433,8,26,10,26,12,26,
  	436,9,26,1,26,3,26,439,8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,3,28,520,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,530,8,32,
  	10,32,12,32,533,9,32,3,32,535,8,32,1,32,1,32,1,32,5,32,540,8,32,10,32,
  	12,32,543,9,32,1,32,3,32,546,8,32,1,33,1,33,1,33,5,33,551,8,33,10,33,
  	12,33,554,9,33,3,33,556,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
  	1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,591,8,41,
  	1,42,1,42,1,42,1,42,3,42,597,8,42,1,43,1,43,1,44,1,44,5,44,603,8,44,10,
  	44,12,44,606,9,44,0,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
  	45,1,0,10,3,0,9,10,13,13,32,32,4,0,97,98,103,103,112,116,119,122,1,0,
  	49,52,1,0,10,10,1,0,49,57,1,0,48,57,2,0,60,60,62,62,3,0,38,38,94,94,124,
  	124,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,661,0,1,1,0,0,
  	0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
  	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
  	0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
  	35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
  	0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
  	0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
  	67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
  	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
  	0,0,89,1,0,0,0,1,92,1,0,0,0,3,98,1,0,0,0,5,100,1,0,0,0,7,102,1,0,0,0,
  	9,104,1,0,0,0,11,106,1,0,0,0,13,108,1,0,0,0,15,110,1,0,0,0,17,116,1,0,
  	0,0,19,120,1,0,0,0,21,126,1,0,0,0,23,129,1,0,0,0,25,134,1,0,0,0,27,142,
  	1,0,0,0,29,169,1,0,0,0,31,171,1,0,0,0,33,178,1,0,0,0,35,184,1,0,0,0,37,
  	191,1,0,0,0,39,196,1,0,0,0,41,276,1,0,0,0,43,374,1,0,0,0,45,376,1,0,0,
  	0,47,384,1,0,0,0,49,399,1,0,0,0,51,404,1,0,0,0,53,415,1,0,0,0,55,443,
  	1,0,0,0,57,519,1,0,0,0,59,521,1,0,0,0,61,523,1,0,0,0,63,525,1,0,0,0,65,
  	534,1,0,0,0,67,555,1,0,0,0,69,557,1,0,0,0,71,559,1,0,0,0,73,561,1,0,0,
  	0,75,563,1,0,0,0,77,565,1,0,0,0,79,567,1,0,0,0,81,569,1,0,0,0,83,590,
  	1,0,0,0,85,596,1,0,0,0,87,598,1,0,0,0,89,600,1,0,0,0,91,93,7,0,0,0,92,
  	91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,
  	97,6,0,0,0,97,2,1,0,0,0,98,99,5,91,0,0,99,4,1,0,0,0,100,101,5,93,0,0,
  	101,6,1,0,0,0,102,103,5,123,0,0,103,8,1,0,0,0,104,105,5,125,0,0,105,10,
  	1,0,0,0,106,107,5,40,0,0,107,12,1,0,0,0,108,109,5,41,0,0,109,14,1,0,0,
  	0,110,111,5,99,0,0,111,112,5,111,0,0,112,113,5,110,0,0,113,114,5,115,
  	0,0,114,115,5,116,0,0,115,16,1,0,0,0,116,117,5,102,0,0,117,118,5,111,
  	0,0,118,119,5,114,0,0,119,18,1,0,0,0,120,121,5,119,0,0,121,122,5,104,
  	0,0,122,123,5,105,0,0,123,124,5,108,0,0,124,125,5,101,0,0,125,20,1,0,
  	0,0,126,127,5,105,0,0,127,128,5,102,0,0,128,22,1,0,0,0,129,130,5,101,
  	0,0,130,131,5,108,0,0,131,132,5,115,0,0,132,133,5,101,0,0,133,24,1,0,
  	0,0,134,135,5,101,0,0,135,136,5,108,0,0,136,137,5,115,0,0,137,138,5,101,
  	0,0,138,139,5,32,0,0,139,140,5,105,0,0,140,141,5,102,0,0,141,26,1,0,0,
  	0,142,143,5,114,0,0,143,144,5,101,0,0,144,145,5,116,0,0,145,146,5,117,
  	0,0,146,147,5,114,0,0,147,148,5,110,0,0,148,28,1,0,0,0,149,150,5,99,0,
  	0,150,151,5,111,0,0,151,152,5,110,0,0,152,153,5,116,0,0,153,154,5,105,
  	0,0,154,155,5,110,0,0,155,156,5,117,0,0,156,170,5,101,0,0,157,158,5,98,
  	0,0,158,159,5,114,0,0,159,160,5,101,0,0,160,161,5,97,0,0,161,170,5,107,
  	0,0,162,163,5,100,0,0,163,164,5,105,0,0,164,165,5,115,0,0,165,166,5,99,
  	0,0,166,167,5,97,0,0,167,168,5,114,0,0,168,170,5,100,0,0,169,149,1,0,
  	0,0,169,157,1,0,0,0,169,162,1,0,0,0,170,30,1,0,0,0,171,172,5,115,0,0,
  	172,173,5,116,0,0,173,174,5,114,0,0,174,175,5,117,0,0,175,176,5,99,0,
  	0,176,177,5,116,0,0,177,32,1,0,0,0,178,179,5,73,0,0,179,180,5,110,0,0,
  	180,181,5,112,0,0,181,182,5,117,0,0,182,183,5,116,0,0,183,34,1,0,0,0,
  	184,185,5,79,0,0,185,186,5,117,0,0,186,187,5,116,0,0,187,188,5,112,0,
  	0,188,189,5,117,0,0,189,190,5,116,0,0,190,36,1,0,0,0,191,192,5,116,0,
  	0,192,193,5,101,0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,38,1,0,0,
  	0,196,197,7,1,0,0,197,40,1,0,0,0,198,199,5,118,0,0,199,200,5,111,0,0,
  	200,201,5,105,0,0,201,277,5,100,0,0,202,203,5,98,0,0,203,204,5,111,0,
  	0,204,205,5,111,0,0,205,206,5,108,0,0,206,208,1,0,0,0,207,209,7,2,0,0,
  	208,207,1,0,0,0,208,209,1,0,0,0,209,212,1,0,0,0,210,211,5,120,0,0,211,
  	213,7,2,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,277,1,0,0,0,214,215,5,
  	105,0,0,215,216,5,110,0,0,216,217,5,116,0,0,217,219,1,0,0,0,218,220,7,
  	2,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,223,1,0,0,0,221,222,5,120,0,
  	0,222,224,7,2,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,277,1,0,0,0,225,
  	226,5,117,0,0,226,227,5,105,0,0,227,228,5,110,0,0,228,229,5,116,0,0,229,
  	231,1,0,0,0,230,232,7,2,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,235,1,
  	0,0,0,233,234,5,120,0,0,234,236,7,2,0,0,235,233,1,0,0,0,235,236,1,0,0,
  	0,236,277,1,0,0,0,237,238,5,104,0,0,238,239,5,97,0,0,239,240,5,108,0,
  	0,240,241,5,102,0,0,241,243,1,0,0,0,242,244,7,2,0,0,243,242,1,0,0,0,243,
  	244,1,0,0,0,244,247,1,0,0,0,245,246,5,120,0,0,246,248,7,2,0,0,247,245,
  	1,0,0,0,247,248,1,0,0,0,248,277,1,0,0,0,249,250,5,102,0,0,250,251,5,108,
  	0,0,251,252,5,111,0,0,252,253,5,97,0,0,253,254,5,116,0,0,254,256,1,0,
  	0,0,255,257,7,2,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,260,1,0,0,0,258,
  	259,5,120,0,0,259,261,7,2,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,277,
  	1,0,0,0,262,263,5,100,0,0,263,264,5,111,0,0,264,265,5,117,0,0,265,266,
  	5,98,0,0,266,267,5,108,0,0,267,268,5,101,0,0,268,270,1,0,0,0,269,271,
  	7,2,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,274,1,0,0,0,272,273,5,120,
  	0,0,273,275,7,2,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,
  	198,1,0,0,0,276,202,1,0,0,0,276,214,1,0,0,0,276,225,1,0,0,0,276,237,1,
  	0,0,0,276,249,1,0,0,0,276,262,1,0,0,0,277,42,1,0,0,0,278,279,5,84,0,0,
  	279,280,5,101,0,0,280,281,5,120,0,0,281,282,5,116,0,0,282,283,5,117,0,
  	0,283,284,5,114,0,0,284,285,5,101,0,0,285,286,5,49,0,0,286,375,5,68,0,
  	0,287,288,5,84,0,0,288,289,5,101,0,0,289,290,5,120,0,0,290,291,5,116,
  	0,0,291,292,5,117,0,0,292,293,5,114,0,0,293,294,5,101,0,0,294,295,5,50,
  	0,0,295,375,5,68,0,0,296,297,5,84,0,0,297,298,5,101,0,0,298,299,5,120,
  	0,0,299,300,5,116,0,0,300,301,5,117,0,0,301,302,5,114,0,0,302,303,5,101,
  	0,0,303,304,5,51,0,0,304,375,5,68,0,0,305,306,5,84,0,0,306,307,5,101,
  	0,0,307,308,5,120,0,0,308,309,5,116,0,0,309,310,5,117,0,0,310,311,5,114,
  	0,0,311,312,5,101,0,0,312,313,5,67,0,0,313,314,5,117,0,0,314,315,5,98,
  	0,0,315,375,5,101,0,0,316,317,5,84,0,0,317,318,5,101,0,0,318,319,5,120,
  	0,0,319,320,5,116,0,0,320,321,5,117,0,0,321,322,5,114,0,0,322,323,5,101,
  	0,0,323,324,5,49,0,0,324,325,5,68,0,0,325,326,5,65,0,0,326,327,5,114,
  	0,0,327,328,5,114,0,0,328,329,5,97,0,0,329,375,5,121,0,0,330,331,5,84,
  	0,0,331,332,5,101,0,0,332,333,5,120,0,0,333,334,5,116,0,0,334,335,5,117,
  	0,0,335,336,5,114,0,0,336,337,5,101,0,0,337,338,5,50,0,0,338,339,5,68,
  	0,0,339,340,5,65,0,0,340,341,5,114,0,0,341,342,5,114,0,0,342,343,5,97,
  	0,0,343,375,5,121,0,0,344,345,5,84,0,0,345,346,5,101,0,0,346,347,5,120,
  	0,0,347,348,5,116,0,0,348,349,5,117,0,0,349,350,5,114,0,0,350,351,5,101,
  	0,0,351,352,5,51,0,0,352,353,5,68,0,0,353,354,5,65,0,0,354,355,5,114,
  	0,0,355,356,5,114,0,0,356,357,5,97,0,0,357,375,5,121,0,0,358,359,5,84,
  	0,0,359,360,5,101,0,0,360,361,5,120,0,0,361,362,5,116,0,0,362,363,5,117,
  	0,0,363,364,5,114,0,0,364,365,5,101,0,0,365,366,5,67,0,0,366,367,5,117,
  	0,0,367,368,5,98,0,0,368,369,5,101,0,0,369,370,5,65,0,0,370,371,5,114,
  	0,0,371,372,5,114,0,0,372,373,5,97,0,0,373,375,5,121,0,0,374,278,1,0,
  	0,0,374,287,1,0,0,0,374,296,1,0,0,0,374,305,1,0,0,0,374,316,1,0,0,0,374,
  	330,1,0,0,0,374,344,1,0,0,0,374,358,1,0,0,0,375,44,1,0,0,0,376,377,5,
  	83,0,0,377,378,5,97,0,0,378,379,5,109,0,0,379,380,5,112,0,0,380,381,5,
  	108,0,0,381,382,5,101,0,0,382,383,5,114,0,0,383,46,1,0,0,0,384,385,5,
  	67,0,0,385,386,5,111,0,0,386,387,5,110,0,0,387,388,5,115,0,0,388,389,
  	5,116,0,0,389,390,5,97,0,0,390,391,5,110,0,0,391,392,5,116,0,0,392,393,
  	5,66,0,0,393,394,5,117,0,0,394,395,5,102,0,0,395,396,5,102,0,0,396,397,
  	5,101,0,0,397,398,5,114,0,0,398,48,1,0,0,0,399,400,5,115,0,0,400,401,
  	5,108,0,0,401,402,5,111,0,0,402,403,5,116,0,0,403,50,1,0,0,0,404,405,
  	5,47,0,0,405,406,5,47,0,0,406,410,1,0,0,0,407,409,8,3,0,0,408,407,1,0,
  	0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,
  	410,1,0,0,0,413,414,7,3,0,0,414,52,1,0,0,0,415,416,5,47,0,0,416,417,5,
  	42,0,0,417,428,1,0,0,0,418,420,8,3,0,0,419,418,1,0,0,0,420,423,1,0,0,
  	0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,
  	425,7,3,0,0,425,427,5,42,0,0,426,421,1,0,0,0,427,430,1,0,0,0,428,426,
  	1,0,0,0,428,429,1,0,0,0,429,438,1,0,0,0,430,428,1,0,0,0,431,433,8,3,0,
  	0,432,431,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,
  	437,1,0,0,0,436,434,1,0,0,0,437,439,7,3,0,0,438,434,1,0,0,0,438,439,1,
  	0,0,0,439,440,1,0,0,0,440,441,5,42,0,0,441,442,5,47,0,0,442,54,1,0,0,
  	0,443,444,5,83,0,0,444,445,5,104,0,0,445,446,5,97,0,0,446,447,5,100,0,
  	0,447,448,5,101,0,0,448,449,5,114,0,0,449,450,5,84,0,0,450,451,5,121,
  	0,0,451,452,5,112,0,0,452,453,5,101,0,0,453,454,5,32,0,0,454,455,5,61,
  	0,0,455,456,5,32,0,0,456,56,1,0,0,0,457,458,5,86,0,0,458,459,5,101,0,
  	0,459,460,5,114,0,0,460,461,5,116,0,0,461,462,5,101,0,0,462,520,5,120,
  	0,0,463,464,5,70,0,0,464,465,5,114,0,0,465,466,5,97,0,0,466,467,5,103,
  	0,0,467,468,5,109,0,0,468,469,5,101,0,0,469,470,5,110,0,0,470,520,5,116,
  	0,0,471,472,5,71,0,0,472,473,5,101,0,0,473,474,5,111,0,0,474,475,5,109,
  	0,0,475,476,5,101,0,0,476,477,5,116,0,0,477,478,5,114,0,0,478,520,5,121,
  	0,0,479,480,5,84,0,0,480,481,5,101,0,0,481,482,5,115,0,0,482,483,5,115,
  	0,0,483,484,5,101,0,0,484,485,5,108,0,0,485,486,5,97,0,0,486,487,5,116,
  	0,0,487,488,5,105,0,0,488,489,5,111,0,0,489,490,5,110,0,0,490,491,5,67,
  	0,0,491,492,5,111,0,0,492,493,5,110,0,0,493,494,5,116,0,0,494,495,5,114,
  	0,0,495,496,5,111,0,0,496,520,5,108,0,0,497,498,5,84,0,0,498,499,5,101,
  	0,0,499,500,5,115,0,0,500,501,5,115,0,0,501,502,5,101,0,0,502,503,5,108,
  	0,0,503,504,5,97,0,0,504,505,5,116,0,0,505,506,5,105,0,0,506,507,5,111,
  	0,0,507,508,5,110,0,0,508,509,5,69,0,0,509,510,5,118,0,0,510,511,5,97,
  	0,0,511,512,5,108,0,0,512,513,5,117,0,0,513,514,5,116,0,0,514,515,5,97,
  	0,0,515,516,5,116,0,0,516,517,5,105,0,0,517,518,5,111,0,0,518,520,5,110,
  	0,0,519,457,1,0,0,0,519,463,1,0,0,0,519,471,1,0,0,0,519,479,1,0,0,0,519,
  	497,1,0,0,0,520,58,1,0,0,0,521,522,5,59,0,0,522,60,1,0,0,0,523,524,5,
  	44,0,0,524,62,1,0,0,0,525,526,5,58,0,0,526,64,1,0,0,0,527,531,7,4,0,0,
  	528,530,7,5,0,0,529,528,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,
  	1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,534,527,1,0,0,0,534,535,1,0,0,
  	0,535,536,1,0,0,0,536,537,7,5,0,0,537,541,5,46,0,0,538,540,7,5,0,0,539,
  	538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,545,1,
  	0,0,0,543,541,1,0,0,0,544,546,5,102,0,0,545,544,1,0,0,0,545,546,1,0,0,
  	0,546,66,1,0,0,0,547,556,5,48,0,0,548,552,7,4,0,0,549,551,7,5,0,0,550,
  	549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,556,1,
  	0,0,0,554,552,1,0,0,0,555,547,1,0,0,0,555,548,1,0,0,0,556,68,1,0,0,0,
  	557,558,5,61,0,0,558,70,1,0,0,0,559,560,5,46,0,0,560,72,1,0,0,0,561,562,
  	5,64,0,0,562,74,1,0,0,0,563,564,5,43,0,0,564,76,1,0,0,0,565,566,5,45,
  	0,0,566,78,1,0,0,0,567,568,5,42,0,0,568,80,1,0,0,0,569,570,5,47,0,0,570,
  	82,1,0,0,0,571,591,5,37,0,0,572,573,5,61,0,0,573,591,5,61,0,0,574,575,
  	5,33,0,0,575,591,5,61,0,0,576,591,7,6,0,0,577,578,5,62,0,0,578,591,5,
  	61,0,0,579,580,5,60,0,0,580,591,5,61,0,0,581,582,5,38,0,0,582,591,5,38,
  	0,0,583,584,5,124,0,0,584,591,5,124,0,0,585,586,5,60,0,0,586,591,5,60,
  	0,0,587,588,5,62,0,0,588,591,5,62,0,0,589,591,7,7,0,0,590,571,1,0,0,0,
  	590,572,1,0,0,0,590,574,1,0,0,0,590,576,1,0,0,0,590,577,1,0,0,0,590,579,
  	1,0,0,0,590,581,1,0,0,0,590,583,1,0,0,0,590,585,1,0,0,0,590,587,1,0,0,
  	0,590,589,1,0,0,0,591,84,1,0,0,0,592,593,5,43,0,0,593,597,5,43,0,0,594,
  	595,5,45,0,0,595,597,5,45,0,0,596,592,1,0,0,0,596,594,1,0,0,0,597,86,
  	1,0,0,0,598,599,5,33,0,0,599,88,1,0,0,0,600,604,7,8,0,0,601,603,7,9,0,
  	0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,
  	90,1,0,0,0,606,604,1,0,0,0,32,0,94,169,208,212,219,223,231,235,243,247,
  	256,260,270,274,276,374,410,421,428,434,438,519,531,534,541,545,552,555,
  	590,596,604,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  srslgrammarlexerLexerStaticData = staticData.release();
}

}

SrslGrammarLexer::SrslGrammarLexer(CharStream *input) : Lexer(input) {
  SrslGrammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *srslgrammarlexerLexerStaticData->atn, srslgrammarlexerLexerStaticData->decisionToDFA, srslgrammarlexerLexerStaticData->sharedContextCache);
}

SrslGrammarLexer::~SrslGrammarLexer() {
  delete _interpreter;
}

std::string SrslGrammarLexer::getGrammarFileName() const {
  return "SrslGrammar.g4";
}

const std::vector<std::string>& SrslGrammarLexer::getRuleNames() const {
  return srslgrammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SrslGrammarLexer::getChannelNames() const {
  return srslgrammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SrslGrammarLexer::getModeNames() const {
  return srslgrammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SrslGrammarLexer::getVocabulary() const {
  return srslgrammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SrslGrammarLexer::getSerializedATN() const {
  return srslgrammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& SrslGrammarLexer::getATN() const {
  return *srslgrammarlexerLexerStaticData->atn;
}




void SrslGrammarLexer::initialize() {
  ::antlr4::internal::call_once(srslgrammarlexerLexerOnceFlag, srslgrammarlexerLexerInitialize);
}
