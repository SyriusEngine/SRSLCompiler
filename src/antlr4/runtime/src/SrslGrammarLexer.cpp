
// Generated from SrslGrammar.g4 by ANTLR 4.11.1


#include "SrslGrammarLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SrslGrammarLexerStaticData final {
  SrslGrammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SrslGrammarLexerStaticData(const SrslGrammarLexerStaticData&) = delete;
  SrslGrammarLexerStaticData(SrslGrammarLexerStaticData&&) = delete;
  SrslGrammarLexerStaticData& operator=(const SrslGrammarLexerStaticData&) = delete;
  SrslGrammarLexerStaticData& operator=(SrslGrammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag srslgrammarlexerLexerOnceFlag;
SrslGrammarLexerStaticData *srslgrammarlexerLexerStaticData = nullptr;

void srslgrammarlexerLexerInitialize() {
  assert(srslgrammarlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SrslGrammarLexerStaticData>(
    std::vector<std::string>{
      "WS", "SBRACKO", "SBRACKC", "CBRACKO", "CBRACKC", "PARENO", "PARENC", 
      "CONST", "FOR", "WHILE", "IF", "ELSE", "ELSEIF", "RETURN", "CONTROL_FLOW", 
      "STRUCT", "SHADER_INPUT", "SHADER_OUTPUT", "TEST", "TEST_ASSERT_TYPE", 
      "TYPE", "TEXTURE_TYPES", "SAMPLER_TYPE", "CONSTANT_BUFFER", "SLOT", 
      "COMMENT", "MCOMMENT", "SHADER_TYPE_LIT", "SHADER_TYPE", "EOL", "COMMA", 
      "COLON", "FLOATING_POINT", "NUMBER", "ASSIGN", "DOT", "AT", "PLUS", 
      "MINUS", "MULTIPLY", "DIVIDE", "OPERATION", "CREMENT", "NOT", "BOOL", 
      "VAR_NAME"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "'['", "']'", "'{'", "'}'", "'('", "')'", "'const'", "'for'", 
      "'while'", "'if'", "'else'", "'else if'", "'return'", "", "'struct'", 
      "'Input'", "'Output'", "'TEST'", "", "", "", "'Sampler'", "'ConstantBuffer'", 
      "'slot'", "", "", "'ShaderType = '", "", "';'", "','", "':'", "", 
      "", "'='", "'.'", "'@'", "'+'", "'-'", "'*'", "'/'", "", "", "'!'"
    },
    std::vector<std::string>{
      "", "WS", "SBRACKO", "SBRACKC", "CBRACKO", "CBRACKC", "PARENO", "PARENC", 
      "CONST", "FOR", "WHILE", "IF", "ELSE", "ELSEIF", "RETURN", "CONTROL_FLOW", 
      "STRUCT", "SHADER_INPUT", "SHADER_OUTPUT", "TEST", "TEST_ASSERT_TYPE", 
      "TYPE", "TEXTURE_TYPES", "SAMPLER_TYPE", "CONSTANT_BUFFER", "SLOT", 
      "COMMENT", "MCOMMENT", "SHADER_TYPE_LIT", "SHADER_TYPE", "EOL", "COMMA", 
      "COLON", "FLOATING_POINT", "NUMBER", "ASSIGN", "DOT", "AT", "PLUS", 
      "MINUS", "MULTIPLY", "DIVIDE", "OPERATION", "CREMENT", "NOT", "BOOL", 
      "VAR_NAME"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,46,674,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,4,0,95,8,0,11,0,12,0,96,1,0,1,
  	0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,172,8,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,253,8,19,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,265,8,20,1,20,1,20,3,20,269,8,
  	20,1,20,1,20,1,20,1,20,1,20,3,20,276,8,20,1,20,1,20,3,20,280,8,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,3,20,288,8,20,1,20,1,20,3,20,292,8,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,3,20,300,8,20,1,20,1,20,3,20,304,8,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,3,20,313,8,20,1,20,1,20,3,20,317,8,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,327,8,20,1,20,1,20,3,20,331,8,20,
  	3,20,333,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,3,21,431,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
  	1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,465,8,25,10,25,12,25,468,
  	9,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,476,8,26,10,26,12,26,479,9,26,
  	1,26,1,26,5,26,483,8,26,10,26,12,26,486,9,26,1,26,5,26,489,8,26,10,26,
  	12,26,492,9,26,1,26,3,26,495,8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,3,28,576,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,
  	586,8,32,10,32,12,32,589,9,32,3,32,591,8,32,1,32,1,32,1,32,5,32,596,8,
  	32,10,32,12,32,599,9,32,1,32,3,32,602,8,32,1,33,1,33,1,33,5,33,607,8,
  	33,10,33,12,33,610,9,33,3,33,612,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
  	37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,647,
  	8,41,1,42,1,42,1,42,1,42,3,42,653,8,42,1,43,1,43,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,3,44,666,8,44,1,45,1,45,5,45,670,8,45,10,45,
  	12,45,673,9,45,0,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,1,0,9,3,0,9,10,13,13,32,32,1,0,49,52,1,0,10,10,1,0,49,57,1,0,48,
  	57,2,0,60,60,62,62,3,0,38,38,94,94,124,124,3,0,65,90,95,95,97,122,4,0,
  	48,57,65,90,95,95,97,122,734,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
  	1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
  	0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
  	29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
  	0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
  	0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
  	61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
  	0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
  	0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,
  	94,1,0,0,0,3,100,1,0,0,0,5,102,1,0,0,0,7,104,1,0,0,0,9,106,1,0,0,0,11,
  	108,1,0,0,0,13,110,1,0,0,0,15,112,1,0,0,0,17,118,1,0,0,0,19,122,1,0,0,
  	0,21,128,1,0,0,0,23,131,1,0,0,0,25,136,1,0,0,0,27,144,1,0,0,0,29,171,
  	1,0,0,0,31,173,1,0,0,0,33,180,1,0,0,0,35,186,1,0,0,0,37,193,1,0,0,0,39,
  	252,1,0,0,0,41,332,1,0,0,0,43,430,1,0,0,0,45,432,1,0,0,0,47,440,1,0,0,
  	0,49,455,1,0,0,0,51,460,1,0,0,0,53,471,1,0,0,0,55,499,1,0,0,0,57,575,
  	1,0,0,0,59,577,1,0,0,0,61,579,1,0,0,0,63,581,1,0,0,0,65,590,1,0,0,0,67,
  	611,1,0,0,0,69,613,1,0,0,0,71,615,1,0,0,0,73,617,1,0,0,0,75,619,1,0,0,
  	0,77,621,1,0,0,0,79,623,1,0,0,0,81,625,1,0,0,0,83,646,1,0,0,0,85,652,
  	1,0,0,0,87,654,1,0,0,0,89,665,1,0,0,0,91,667,1,0,0,0,93,95,7,0,0,0,94,
  	93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,
  	99,6,0,0,0,99,2,1,0,0,0,100,101,5,91,0,0,101,4,1,0,0,0,102,103,5,93,0,
  	0,103,6,1,0,0,0,104,105,5,123,0,0,105,8,1,0,0,0,106,107,5,125,0,0,107,
  	10,1,0,0,0,108,109,5,40,0,0,109,12,1,0,0,0,110,111,5,41,0,0,111,14,1,
  	0,0,0,112,113,5,99,0,0,113,114,5,111,0,0,114,115,5,110,0,0,115,116,5,
  	115,0,0,116,117,5,116,0,0,117,16,1,0,0,0,118,119,5,102,0,0,119,120,5,
  	111,0,0,120,121,5,114,0,0,121,18,1,0,0,0,122,123,5,119,0,0,123,124,5,
  	104,0,0,124,125,5,105,0,0,125,126,5,108,0,0,126,127,5,101,0,0,127,20,
  	1,0,0,0,128,129,5,105,0,0,129,130,5,102,0,0,130,22,1,0,0,0,131,132,5,
  	101,0,0,132,133,5,108,0,0,133,134,5,115,0,0,134,135,5,101,0,0,135,24,
  	1,0,0,0,136,137,5,101,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,140,
  	5,101,0,0,140,141,5,32,0,0,141,142,5,105,0,0,142,143,5,102,0,0,143,26,
  	1,0,0,0,144,145,5,114,0,0,145,146,5,101,0,0,146,147,5,116,0,0,147,148,
  	5,117,0,0,148,149,5,114,0,0,149,150,5,110,0,0,150,28,1,0,0,0,151,152,
  	5,99,0,0,152,153,5,111,0,0,153,154,5,110,0,0,154,155,5,116,0,0,155,156,
  	5,105,0,0,156,157,5,110,0,0,157,158,5,117,0,0,158,172,5,101,0,0,159,160,
  	5,98,0,0,160,161,5,114,0,0,161,162,5,101,0,0,162,163,5,97,0,0,163,172,
  	5,107,0,0,164,165,5,100,0,0,165,166,5,105,0,0,166,167,5,115,0,0,167,168,
  	5,99,0,0,168,169,5,97,0,0,169,170,5,114,0,0,170,172,5,100,0,0,171,151,
  	1,0,0,0,171,159,1,0,0,0,171,164,1,0,0,0,172,30,1,0,0,0,173,174,5,115,
  	0,0,174,175,5,116,0,0,175,176,5,114,0,0,176,177,5,117,0,0,177,178,5,99,
  	0,0,178,179,5,116,0,0,179,32,1,0,0,0,180,181,5,73,0,0,181,182,5,110,0,
  	0,182,183,5,112,0,0,183,184,5,117,0,0,184,185,5,116,0,0,185,34,1,0,0,
  	0,186,187,5,79,0,0,187,188,5,117,0,0,188,189,5,116,0,0,189,190,5,112,
  	0,0,190,191,5,117,0,0,191,192,5,116,0,0,192,36,1,0,0,0,193,194,5,84,0,
  	0,194,195,5,69,0,0,195,196,5,83,0,0,196,197,5,84,0,0,197,38,1,0,0,0,198,
  	199,5,69,0,0,199,200,5,88,0,0,200,201,5,80,0,0,201,202,5,69,0,0,202,203,
  	5,67,0,0,203,204,5,84,0,0,204,205,5,95,0,0,205,206,5,69,0,0,206,253,5,
  	81,0,0,207,208,5,69,0,0,208,209,5,88,0,0,209,210,5,80,0,0,210,211,5,69,
  	0,0,211,212,5,67,0,0,212,213,5,84,0,0,213,214,5,95,0,0,214,215,5,78,0,
  	0,215,253,5,69,0,0,216,217,5,69,0,0,217,218,5,88,0,0,218,219,5,80,0,0,
  	219,220,5,69,0,0,220,221,5,67,0,0,221,222,5,84,0,0,222,223,5,95,0,0,223,
  	224,5,76,0,0,224,253,5,84,0,0,225,226,5,69,0,0,226,227,5,88,0,0,227,228,
  	5,80,0,0,228,229,5,69,0,0,229,230,5,67,0,0,230,231,5,84,0,0,231,232,5,
  	95,0,0,232,233,5,71,0,0,233,253,5,84,0,0,234,235,5,69,0,0,235,236,5,88,
  	0,0,236,237,5,80,0,0,237,238,5,69,0,0,238,239,5,67,0,0,239,240,5,84,0,
  	0,240,241,5,95,0,0,241,242,5,76,0,0,242,253,5,69,0,0,243,244,5,69,0,0,
  	244,245,5,88,0,0,245,246,5,80,0,0,246,247,5,69,0,0,247,248,5,67,0,0,248,
  	249,5,84,0,0,249,250,5,95,0,0,250,251,5,71,0,0,251,253,5,69,0,0,252,198,
  	1,0,0,0,252,207,1,0,0,0,252,216,1,0,0,0,252,225,1,0,0,0,252,234,1,0,0,
  	0,252,243,1,0,0,0,253,40,1,0,0,0,254,255,5,118,0,0,255,256,5,111,0,0,
  	256,257,5,105,0,0,257,333,5,100,0,0,258,259,5,98,0,0,259,260,5,111,0,
  	0,260,261,5,111,0,0,261,262,5,108,0,0,262,264,1,0,0,0,263,265,7,1,0,0,
  	264,263,1,0,0,0,264,265,1,0,0,0,265,268,1,0,0,0,266,267,5,120,0,0,267,
  	269,7,1,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,333,1,0,0,0,270,271,5,
  	105,0,0,271,272,5,110,0,0,272,273,5,116,0,0,273,275,1,0,0,0,274,276,7,
  	1,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,279,1,0,0,0,277,278,5,120,0,
  	0,278,280,7,1,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,333,1,0,0,0,281,
  	282,5,117,0,0,282,283,5,105,0,0,283,284,5,110,0,0,284,285,5,116,0,0,285,
  	287,1,0,0,0,286,288,7,1,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,291,1,
  	0,0,0,289,290,5,120,0,0,290,292,7,1,0,0,291,289,1,0,0,0,291,292,1,0,0,
  	0,292,333,1,0,0,0,293,294,5,104,0,0,294,295,5,97,0,0,295,296,5,108,0,
  	0,296,297,5,102,0,0,297,299,1,0,0,0,298,300,7,1,0,0,299,298,1,0,0,0,299,
  	300,1,0,0,0,300,303,1,0,0,0,301,302,5,120,0,0,302,304,7,1,0,0,303,301,
  	1,0,0,0,303,304,1,0,0,0,304,333,1,0,0,0,305,306,5,102,0,0,306,307,5,108,
  	0,0,307,308,5,111,0,0,308,309,5,97,0,0,309,310,5,116,0,0,310,312,1,0,
  	0,0,311,313,7,1,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,316,1,0,0,0,314,
  	315,5,120,0,0,315,317,7,1,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,333,
  	1,0,0,0,318,319,5,100,0,0,319,320,5,111,0,0,320,321,5,117,0,0,321,322,
  	5,98,0,0,322,323,5,108,0,0,323,324,5,101,0,0,324,326,1,0,0,0,325,327,
  	7,1,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,330,1,0,0,0,328,329,5,120,
  	0,0,329,331,7,1,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,
  	254,1,0,0,0,332,258,1,0,0,0,332,270,1,0,0,0,332,281,1,0,0,0,332,293,1,
  	0,0,0,332,305,1,0,0,0,332,318,1,0,0,0,333,42,1,0,0,0,334,335,5,84,0,0,
  	335,336,5,101,0,0,336,337,5,120,0,0,337,338,5,116,0,0,338,339,5,117,0,
  	0,339,340,5,114,0,0,340,341,5,101,0,0,341,342,5,49,0,0,342,431,5,68,0,
  	0,343,344,5,84,0,0,344,345,5,101,0,0,345,346,5,120,0,0,346,347,5,116,
  	0,0,347,348,5,117,0,0,348,349,5,114,0,0,349,350,5,101,0,0,350,351,5,50,
  	0,0,351,431,5,68,0,0,352,353,5,84,0,0,353,354,5,101,0,0,354,355,5,120,
  	0,0,355,356,5,116,0,0,356,357,5,117,0,0,357,358,5,114,0,0,358,359,5,101,
  	0,0,359,360,5,51,0,0,360,431,5,68,0,0,361,362,5,84,0,0,362,363,5,101,
  	0,0,363,364,5,120,0,0,364,365,5,116,0,0,365,366,5,117,0,0,366,367,5,114,
  	0,0,367,368,5,101,0,0,368,369,5,67,0,0,369,370,5,117,0,0,370,371,5,98,
  	0,0,371,431,5,101,0,0,372,373,5,84,0,0,373,374,5,101,0,0,374,375,5,120,
  	0,0,375,376,5,116,0,0,376,377,5,117,0,0,377,378,5,114,0,0,378,379,5,101,
  	0,0,379,380,5,49,0,0,380,381,5,68,0,0,381,382,5,65,0,0,382,383,5,114,
  	0,0,383,384,5,114,0,0,384,385,5,97,0,0,385,431,5,121,0,0,386,387,5,84,
  	0,0,387,388,5,101,0,0,388,389,5,120,0,0,389,390,5,116,0,0,390,391,5,117,
  	0,0,391,392,5,114,0,0,392,393,5,101,0,0,393,394,5,50,0,0,394,395,5,68,
  	0,0,395,396,5,65,0,0,396,397,5,114,0,0,397,398,5,114,0,0,398,399,5,97,
  	0,0,399,431,5,121,0,0,400,401,5,84,0,0,401,402,5,101,0,0,402,403,5,120,
  	0,0,403,404,5,116,0,0,404,405,5,117,0,0,405,406,5,114,0,0,406,407,5,101,
  	0,0,407,408,5,51,0,0,408,409,5,68,0,0,409,410,5,65,0,0,410,411,5,114,
  	0,0,411,412,5,114,0,0,412,413,5,97,0,0,413,431,5,121,0,0,414,415,5,84,
  	0,0,415,416,5,101,0,0,416,417,5,120,0,0,417,418,5,116,0,0,418,419,5,117,
  	0,0,419,420,5,114,0,0,420,421,5,101,0,0,421,422,5,67,0,0,422,423,5,117,
  	0,0,423,424,5,98,0,0,424,425,5,101,0,0,425,426,5,65,0,0,426,427,5,114,
  	0,0,427,428,5,114,0,0,428,429,5,97,0,0,429,431,5,121,0,0,430,334,1,0,
  	0,0,430,343,1,0,0,0,430,352,1,0,0,0,430,361,1,0,0,0,430,372,1,0,0,0,430,
  	386,1,0,0,0,430,400,1,0,0,0,430,414,1,0,0,0,431,44,1,0,0,0,432,433,5,
  	83,0,0,433,434,5,97,0,0,434,435,5,109,0,0,435,436,5,112,0,0,436,437,5,
  	108,0,0,437,438,5,101,0,0,438,439,5,114,0,0,439,46,1,0,0,0,440,441,5,
  	67,0,0,441,442,5,111,0,0,442,443,5,110,0,0,443,444,5,115,0,0,444,445,
  	5,116,0,0,445,446,5,97,0,0,446,447,5,110,0,0,447,448,5,116,0,0,448,449,
  	5,66,0,0,449,450,5,117,0,0,450,451,5,102,0,0,451,452,5,102,0,0,452,453,
  	5,101,0,0,453,454,5,114,0,0,454,48,1,0,0,0,455,456,5,115,0,0,456,457,
  	5,108,0,0,457,458,5,111,0,0,458,459,5,116,0,0,459,50,1,0,0,0,460,461,
  	5,47,0,0,461,462,5,47,0,0,462,466,1,0,0,0,463,465,8,2,0,0,464,463,1,0,
  	0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,
  	466,1,0,0,0,469,470,7,2,0,0,470,52,1,0,0,0,471,472,5,47,0,0,472,473,5,
  	42,0,0,473,484,1,0,0,0,474,476,8,2,0,0,475,474,1,0,0,0,476,479,1,0,0,
  	0,477,475,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,
  	481,7,2,0,0,481,483,5,42,0,0,482,477,1,0,0,0,483,486,1,0,0,0,484,482,
  	1,0,0,0,484,485,1,0,0,0,485,494,1,0,0,0,486,484,1,0,0,0,487,489,8,2,0,
  	0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,
  	493,1,0,0,0,492,490,1,0,0,0,493,495,7,2,0,0,494,490,1,0,0,0,494,495,1,
  	0,0,0,495,496,1,0,0,0,496,497,5,42,0,0,497,498,5,47,0,0,498,54,1,0,0,
  	0,499,500,5,83,0,0,500,501,5,104,0,0,501,502,5,97,0,0,502,503,5,100,0,
  	0,503,504,5,101,0,0,504,505,5,114,0,0,505,506,5,84,0,0,506,507,5,121,
  	0,0,507,508,5,112,0,0,508,509,5,101,0,0,509,510,5,32,0,0,510,511,5,61,
  	0,0,511,512,5,32,0,0,512,56,1,0,0,0,513,514,5,86,0,0,514,515,5,101,0,
  	0,515,516,5,114,0,0,516,517,5,116,0,0,517,518,5,101,0,0,518,576,5,120,
  	0,0,519,520,5,70,0,0,520,521,5,114,0,0,521,522,5,97,0,0,522,523,5,103,
  	0,0,523,524,5,109,0,0,524,525,5,101,0,0,525,526,5,110,0,0,526,576,5,116,
  	0,0,527,528,5,71,0,0,528,529,5,101,0,0,529,530,5,111,0,0,530,531,5,109,
  	0,0,531,532,5,101,0,0,532,533,5,116,0,0,533,534,5,114,0,0,534,576,5,121,
  	0,0,535,536,5,84,0,0,536,537,5,101,0,0,537,538,5,115,0,0,538,539,5,115,
  	0,0,539,540,5,101,0,0,540,541,5,108,0,0,541,542,5,97,0,0,542,543,5,116,
  	0,0,543,544,5,105,0,0,544,545,5,111,0,0,545,546,5,110,0,0,546,547,5,67,
  	0,0,547,548,5,111,0,0,548,549,5,110,0,0,549,550,5,116,0,0,550,551,5,114,
  	0,0,551,552,5,111,0,0,552,576,5,108,0,0,553,554,5,84,0,0,554,555,5,101,
  	0,0,555,556,5,115,0,0,556,557,5,115,0,0,557,558,5,101,0,0,558,559,5,108,
  	0,0,559,560,5,97,0,0,560,561,5,116,0,0,561,562,5,105,0,0,562,563,5,111,
  	0,0,563,564,5,110,0,0,564,565,5,69,0,0,565,566,5,118,0,0,566,567,5,97,
  	0,0,567,568,5,108,0,0,568,569,5,117,0,0,569,570,5,116,0,0,570,571,5,97,
  	0,0,571,572,5,116,0,0,572,573,5,105,0,0,573,574,5,111,0,0,574,576,5,110,
  	0,0,575,513,1,0,0,0,575,519,1,0,0,0,575,527,1,0,0,0,575,535,1,0,0,0,575,
  	553,1,0,0,0,576,58,1,0,0,0,577,578,5,59,0,0,578,60,1,0,0,0,579,580,5,
  	44,0,0,580,62,1,0,0,0,581,582,5,58,0,0,582,64,1,0,0,0,583,587,7,3,0,0,
  	584,586,7,4,0,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,
  	1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,590,583,1,0,0,0,590,591,1,0,0,
  	0,591,592,1,0,0,0,592,593,7,4,0,0,593,597,5,46,0,0,594,596,7,4,0,0,595,
  	594,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,601,1,
  	0,0,0,599,597,1,0,0,0,600,602,5,102,0,0,601,600,1,0,0,0,601,602,1,0,0,
  	0,602,66,1,0,0,0,603,612,5,48,0,0,604,608,7,3,0,0,605,607,7,4,0,0,606,
  	605,1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,612,1,
  	0,0,0,610,608,1,0,0,0,611,603,1,0,0,0,611,604,1,0,0,0,612,68,1,0,0,0,
  	613,614,5,61,0,0,614,70,1,0,0,0,615,616,5,46,0,0,616,72,1,0,0,0,617,618,
  	5,64,0,0,618,74,1,0,0,0,619,620,5,43,0,0,620,76,1,0,0,0,621,622,5,45,
  	0,0,622,78,1,0,0,0,623,624,5,42,0,0,624,80,1,0,0,0,625,626,5,47,0,0,626,
  	82,1,0,0,0,627,647,5,37,0,0,628,629,5,61,0,0,629,647,5,61,0,0,630,631,
  	5,33,0,0,631,647,5,61,0,0,632,647,7,5,0,0,633,634,5,62,0,0,634,647,5,
  	61,0,0,635,636,5,60,0,0,636,647,5,61,0,0,637,638,5,38,0,0,638,647,5,38,
  	0,0,639,640,5,124,0,0,640,647,5,124,0,0,641,642,5,60,0,0,642,647,5,60,
  	0,0,643,644,5,62,0,0,644,647,5,62,0,0,645,647,7,6,0,0,646,627,1,0,0,0,
  	646,628,1,0,0,0,646,630,1,0,0,0,646,632,1,0,0,0,646,633,1,0,0,0,646,635,
  	1,0,0,0,646,637,1,0,0,0,646,639,1,0,0,0,646,641,1,0,0,0,646,643,1,0,0,
  	0,646,645,1,0,0,0,647,84,1,0,0,0,648,649,5,43,0,0,649,653,5,43,0,0,650,
  	651,5,45,0,0,651,653,5,45,0,0,652,648,1,0,0,0,652,650,1,0,0,0,653,86,
  	1,0,0,0,654,655,5,33,0,0,655,88,1,0,0,0,656,657,5,116,0,0,657,658,5,114,
  	0,0,658,659,5,117,0,0,659,666,5,101,0,0,660,661,5,102,0,0,661,662,5,97,
  	0,0,662,663,5,108,0,0,663,664,5,115,0,0,664,666,5,101,0,0,665,656,1,0,
  	0,0,665,660,1,0,0,0,666,90,1,0,0,0,667,671,7,7,0,0,668,670,7,8,0,0,669,
  	668,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,92,1,
  	0,0,0,673,671,1,0,0,0,34,0,96,171,252,264,268,275,279,287,291,299,303,
  	312,316,326,330,332,430,466,477,484,490,494,575,587,590,597,601,608,611,
  	646,652,665,671,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  srslgrammarlexerLexerStaticData = staticData.release();
}

}

SrslGrammarLexer::SrslGrammarLexer(CharStream *input) : Lexer(input) {
  SrslGrammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *srslgrammarlexerLexerStaticData->atn, srslgrammarlexerLexerStaticData->decisionToDFA, srslgrammarlexerLexerStaticData->sharedContextCache);
}

SrslGrammarLexer::~SrslGrammarLexer() {
  delete _interpreter;
}

std::string SrslGrammarLexer::getGrammarFileName() const {
  return "SrslGrammar.g4";
}

const std::vector<std::string>& SrslGrammarLexer::getRuleNames() const {
  return srslgrammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SrslGrammarLexer::getChannelNames() const {
  return srslgrammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SrslGrammarLexer::getModeNames() const {
  return srslgrammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SrslGrammarLexer::getVocabulary() const {
  return srslgrammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SrslGrammarLexer::getSerializedATN() const {
  return srslgrammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& SrslGrammarLexer::getATN() const {
  return *srslgrammarlexerLexerStaticData->atn;
}




void SrslGrammarLexer::initialize() {
  ::antlr4::internal::call_once(srslgrammarlexerLexerOnceFlag, srslgrammarlexerLexerInitialize);
}
