
// Generated from SrslGrammar.g4 by ANTLR 4.11.1


#include "SrslGrammarLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SrslGrammarLexerStaticData final {
  SrslGrammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SrslGrammarLexerStaticData(const SrslGrammarLexerStaticData&) = delete;
  SrslGrammarLexerStaticData(SrslGrammarLexerStaticData&&) = delete;
  SrslGrammarLexerStaticData& operator=(const SrslGrammarLexerStaticData&) = delete;
  SrslGrammarLexerStaticData& operator=(SrslGrammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag srslgrammarlexerLexerOnceFlag;
SrslGrammarLexerStaticData *srslgrammarlexerLexerStaticData = nullptr;

void srslgrammarlexerLexerInitialize() {
  assert(srslgrammarlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SrslGrammarLexerStaticData>(
    std::vector<std::string>{
      "WS", "COMMENT", "SBRACKO", "SBRACKC", "CBRACKO", "CBRACKC", "PARENO", 
      "PARENC", "CONST", "FOR", "WHILE", "IF", "ELSE", "RETURN", "CONTROL_FLOW", 
      "STRUCT", "SHADER_INPUT", "SHADER_OUTPUT", "TYPE", "TEXTURE_TYPES", 
      "SAMPLER_TYPE", "CONSTANT_BUFFER", "SLOT", "SHADER_TYPE_LIT", "SHADER_TYPE", 
      "EOL", "COMMA", "COLON", "FLOATING_POINT", "NUMBER", "ASSIGN", "DOT", 
      "AT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "OPERATION", "CREMENT", 
      "NOT", "BOOL", "VAR_NAME"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "'['", "']'", "'{'", "'}'", "'('", "')'", "'const'", "'for'", 
      "'while'", "'if'", "'else'", "'return'", "", "'struct'", "'Input'", 
      "'Output'", "", "", "'Sampler'", "'ConstantBuffer'", "'slot'", "'ShaderType = '", 
      "", "';'", "','", "':'", "", "", "'='", "'.'", "'@'", "'+'", "'-'", 
      "'*'", "'/'", "", "", "'!'"
    },
    std::vector<std::string>{
      "", "WS", "COMMENT", "SBRACKO", "SBRACKC", "CBRACKO", "CBRACKC", "PARENO", 
      "PARENC", "CONST", "FOR", "WHILE", "IF", "ELSE", "RETURN", "CONTROL_FLOW", 
      "STRUCT", "SHADER_INPUT", "SHADER_OUTPUT", "TYPE", "TEXTURE_TYPES", 
      "SAMPLER_TYPE", "CONSTANT_BUFFER", "SLOT", "SHADER_TYPE_LIT", "SHADER_TYPE", 
      "EOL", "COMMA", "COLON", "FLOATING_POINT", "NUMBER", "ASSIGN", "DOT", 
      "AT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "OPERATION", "CREMENT", 
      "NOT", "BOOL", "VAR_NAME"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,42,538,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,
  	4,0,87,8,0,11,0,12,0,88,1,0,1,0,1,1,1,1,1,1,1,1,5,1,97,8,1,10,1,12,1,
  	100,9,1,1,1,3,1,103,8,1,1,1,1,1,1,1,1,1,1,1,5,1,110,8,1,10,1,12,1,113,
  	9,1,1,1,1,1,3,1,117,8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
  	6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,184,8,14,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	3,18,216,8,18,1,18,1,18,3,18,220,8,18,1,18,1,18,1,18,1,18,1,18,3,18,227,
  	8,18,1,18,1,18,3,18,231,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,239,8,
  	18,1,18,1,18,3,18,243,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,251,8,18,
  	1,18,1,18,3,18,255,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,264,8,
  	18,1,18,1,18,3,18,268,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,
  	18,278,8,18,1,18,1,18,3,18,282,8,18,3,18,284,8,18,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,382,8,19,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,440,8,24,
  	1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,5,28,450,8,28,10,28,12,28,453,
  	9,28,3,28,455,8,28,1,28,1,28,1,28,5,28,460,8,28,10,28,12,28,463,9,28,
  	1,28,3,28,466,8,28,1,29,1,29,1,29,5,29,471,8,29,10,29,12,29,474,9,29,
  	3,29,476,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
  	1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,511,8,37,1,38,1,38,1,38,
  	1,38,3,38,517,8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,3,40,530,8,40,1,41,1,41,5,41,534,8,41,10,41,12,41,537,9,41,1,111,
  	0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
  	27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
  	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
  	73,37,75,38,77,39,79,40,81,41,83,42,1,0,9,3,0,9,10,13,13,32,32,2,0,10,
  	10,13,13,1,0,49,52,1,0,49,57,1,0,48,57,2,0,60,60,62,62,3,0,38,38,94,94,
  	124,124,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,589,0,1,1,
  	0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
  	0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
  	0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
  	45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
  	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
  	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
  	77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,86,1,0,0,0,3,116,
  	1,0,0,0,5,120,1,0,0,0,7,122,1,0,0,0,9,124,1,0,0,0,11,126,1,0,0,0,13,128,
  	1,0,0,0,15,130,1,0,0,0,17,132,1,0,0,0,19,138,1,0,0,0,21,142,1,0,0,0,23,
  	148,1,0,0,0,25,151,1,0,0,0,27,156,1,0,0,0,29,183,1,0,0,0,31,185,1,0,0,
  	0,33,192,1,0,0,0,35,198,1,0,0,0,37,283,1,0,0,0,39,381,1,0,0,0,41,383,
  	1,0,0,0,43,391,1,0,0,0,45,406,1,0,0,0,47,411,1,0,0,0,49,439,1,0,0,0,51,
  	441,1,0,0,0,53,443,1,0,0,0,55,445,1,0,0,0,57,454,1,0,0,0,59,475,1,0,0,
  	0,61,477,1,0,0,0,63,479,1,0,0,0,65,481,1,0,0,0,67,483,1,0,0,0,69,485,
  	1,0,0,0,71,487,1,0,0,0,73,489,1,0,0,0,75,510,1,0,0,0,77,516,1,0,0,0,79,
  	518,1,0,0,0,81,529,1,0,0,0,83,531,1,0,0,0,85,87,7,0,0,0,86,85,1,0,0,0,
  	87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,6,0,0,0,
  	91,2,1,0,0,0,92,93,5,47,0,0,93,94,5,47,0,0,94,98,1,0,0,0,95,97,8,1,0,
  	0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,102,1,0,
  	0,0,100,98,1,0,0,0,101,103,5,13,0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,
  	104,1,0,0,0,104,117,5,10,0,0,105,106,5,47,0,0,106,107,5,42,0,0,107,111,
  	1,0,0,0,108,110,9,0,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,112,1,0,0,
  	0,111,109,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,115,5,42,0,0,115,
  	117,5,47,0,0,116,92,1,0,0,0,116,105,1,0,0,0,117,118,1,0,0,0,118,119,6,
  	1,0,0,119,4,1,0,0,0,120,121,5,91,0,0,121,6,1,0,0,0,122,123,5,93,0,0,123,
  	8,1,0,0,0,124,125,5,123,0,0,125,10,1,0,0,0,126,127,5,125,0,0,127,12,1,
  	0,0,0,128,129,5,40,0,0,129,14,1,0,0,0,130,131,5,41,0,0,131,16,1,0,0,0,
  	132,133,5,99,0,0,133,134,5,111,0,0,134,135,5,110,0,0,135,136,5,115,0,
  	0,136,137,5,116,0,0,137,18,1,0,0,0,138,139,5,102,0,0,139,140,5,111,0,
  	0,140,141,5,114,0,0,141,20,1,0,0,0,142,143,5,119,0,0,143,144,5,104,0,
  	0,144,145,5,105,0,0,145,146,5,108,0,0,146,147,5,101,0,0,147,22,1,0,0,
  	0,148,149,5,105,0,0,149,150,5,102,0,0,150,24,1,0,0,0,151,152,5,101,0,
  	0,152,153,5,108,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,26,1,0,0,
  	0,156,157,5,114,0,0,157,158,5,101,0,0,158,159,5,116,0,0,159,160,5,117,
  	0,0,160,161,5,114,0,0,161,162,5,110,0,0,162,28,1,0,0,0,163,164,5,99,0,
  	0,164,165,5,111,0,0,165,166,5,110,0,0,166,167,5,116,0,0,167,168,5,105,
  	0,0,168,169,5,110,0,0,169,170,5,117,0,0,170,184,5,101,0,0,171,172,5,98,
  	0,0,172,173,5,114,0,0,173,174,5,101,0,0,174,175,5,97,0,0,175,184,5,107,
  	0,0,176,177,5,100,0,0,177,178,5,105,0,0,178,179,5,115,0,0,179,180,5,99,
  	0,0,180,181,5,97,0,0,181,182,5,114,0,0,182,184,5,100,0,0,183,163,1,0,
  	0,0,183,171,1,0,0,0,183,176,1,0,0,0,184,30,1,0,0,0,185,186,5,115,0,0,
  	186,187,5,116,0,0,187,188,5,114,0,0,188,189,5,117,0,0,189,190,5,99,0,
  	0,190,191,5,116,0,0,191,32,1,0,0,0,192,193,5,73,0,0,193,194,5,110,0,0,
  	194,195,5,112,0,0,195,196,5,117,0,0,196,197,5,116,0,0,197,34,1,0,0,0,
  	198,199,5,79,0,0,199,200,5,117,0,0,200,201,5,116,0,0,201,202,5,112,0,
  	0,202,203,5,117,0,0,203,204,5,116,0,0,204,36,1,0,0,0,205,206,5,118,0,
  	0,206,207,5,111,0,0,207,208,5,105,0,0,208,284,5,100,0,0,209,210,5,98,
  	0,0,210,211,5,111,0,0,211,212,5,111,0,0,212,213,5,108,0,0,213,215,1,0,
  	0,0,214,216,7,2,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,219,1,0,0,0,217,
  	218,5,120,0,0,218,220,7,2,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,284,
  	1,0,0,0,221,222,5,105,0,0,222,223,5,110,0,0,223,224,5,116,0,0,224,226,
  	1,0,0,0,225,227,7,2,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,230,1,0,0,
  	0,228,229,5,120,0,0,229,231,7,2,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,
  	284,1,0,0,0,232,233,5,117,0,0,233,234,5,105,0,0,234,235,5,110,0,0,235,
  	236,5,116,0,0,236,238,1,0,0,0,237,239,7,2,0,0,238,237,1,0,0,0,238,239,
  	1,0,0,0,239,242,1,0,0,0,240,241,5,120,0,0,241,243,7,2,0,0,242,240,1,0,
  	0,0,242,243,1,0,0,0,243,284,1,0,0,0,244,245,5,104,0,0,245,246,5,97,0,
  	0,246,247,5,108,0,0,247,248,5,102,0,0,248,250,1,0,0,0,249,251,7,2,0,0,
  	250,249,1,0,0,0,250,251,1,0,0,0,251,254,1,0,0,0,252,253,5,120,0,0,253,
  	255,7,2,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,284,1,0,0,0,256,257,5,
  	102,0,0,257,258,5,108,0,0,258,259,5,111,0,0,259,260,5,97,0,0,260,261,
  	5,116,0,0,261,263,1,0,0,0,262,264,7,2,0,0,263,262,1,0,0,0,263,264,1,0,
  	0,0,264,267,1,0,0,0,265,266,5,120,0,0,266,268,7,2,0,0,267,265,1,0,0,0,
  	267,268,1,0,0,0,268,284,1,0,0,0,269,270,5,100,0,0,270,271,5,111,0,0,271,
  	272,5,117,0,0,272,273,5,98,0,0,273,274,5,108,0,0,274,275,5,101,0,0,275,
  	277,1,0,0,0,276,278,7,2,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,281,1,
  	0,0,0,279,280,5,120,0,0,280,282,7,2,0,0,281,279,1,0,0,0,281,282,1,0,0,
  	0,282,284,1,0,0,0,283,205,1,0,0,0,283,209,1,0,0,0,283,221,1,0,0,0,283,
  	232,1,0,0,0,283,244,1,0,0,0,283,256,1,0,0,0,283,269,1,0,0,0,284,38,1,
  	0,0,0,285,286,5,84,0,0,286,287,5,101,0,0,287,288,5,120,0,0,288,289,5,
  	116,0,0,289,290,5,117,0,0,290,291,5,114,0,0,291,292,5,101,0,0,292,293,
  	5,49,0,0,293,382,5,68,0,0,294,295,5,84,0,0,295,296,5,101,0,0,296,297,
  	5,120,0,0,297,298,5,116,0,0,298,299,5,117,0,0,299,300,5,114,0,0,300,301,
  	5,101,0,0,301,302,5,50,0,0,302,382,5,68,0,0,303,304,5,84,0,0,304,305,
  	5,101,0,0,305,306,5,120,0,0,306,307,5,116,0,0,307,308,5,117,0,0,308,309,
  	5,114,0,0,309,310,5,101,0,0,310,311,5,51,0,0,311,382,5,68,0,0,312,313,
  	5,84,0,0,313,314,5,101,0,0,314,315,5,120,0,0,315,316,5,116,0,0,316,317,
  	5,117,0,0,317,318,5,114,0,0,318,319,5,101,0,0,319,320,5,67,0,0,320,321,
  	5,117,0,0,321,322,5,98,0,0,322,382,5,101,0,0,323,324,5,84,0,0,324,325,
  	5,101,0,0,325,326,5,120,0,0,326,327,5,116,0,0,327,328,5,117,0,0,328,329,
  	5,114,0,0,329,330,5,101,0,0,330,331,5,49,0,0,331,332,5,68,0,0,332,333,
  	5,65,0,0,333,334,5,114,0,0,334,335,5,114,0,0,335,336,5,97,0,0,336,382,
  	5,121,0,0,337,338,5,84,0,0,338,339,5,101,0,0,339,340,5,120,0,0,340,341,
  	5,116,0,0,341,342,5,117,0,0,342,343,5,114,0,0,343,344,5,101,0,0,344,345,
  	5,50,0,0,345,346,5,68,0,0,346,347,5,65,0,0,347,348,5,114,0,0,348,349,
  	5,114,0,0,349,350,5,97,0,0,350,382,5,121,0,0,351,352,5,84,0,0,352,353,
  	5,101,0,0,353,354,5,120,0,0,354,355,5,116,0,0,355,356,5,117,0,0,356,357,
  	5,114,0,0,357,358,5,101,0,0,358,359,5,51,0,0,359,360,5,68,0,0,360,361,
  	5,65,0,0,361,362,5,114,0,0,362,363,5,114,0,0,363,364,5,97,0,0,364,382,
  	5,121,0,0,365,366,5,84,0,0,366,367,5,101,0,0,367,368,5,120,0,0,368,369,
  	5,116,0,0,369,370,5,117,0,0,370,371,5,114,0,0,371,372,5,101,0,0,372,373,
  	5,67,0,0,373,374,5,117,0,0,374,375,5,98,0,0,375,376,5,101,0,0,376,377,
  	5,65,0,0,377,378,5,114,0,0,378,379,5,114,0,0,379,380,5,97,0,0,380,382,
  	5,121,0,0,381,285,1,0,0,0,381,294,1,0,0,0,381,303,1,0,0,0,381,312,1,0,
  	0,0,381,323,1,0,0,0,381,337,1,0,0,0,381,351,1,0,0,0,381,365,1,0,0,0,382,
  	40,1,0,0,0,383,384,5,83,0,0,384,385,5,97,0,0,385,386,5,109,0,0,386,387,
  	5,112,0,0,387,388,5,108,0,0,388,389,5,101,0,0,389,390,5,114,0,0,390,42,
  	1,0,0,0,391,392,5,67,0,0,392,393,5,111,0,0,393,394,5,110,0,0,394,395,
  	5,115,0,0,395,396,5,116,0,0,396,397,5,97,0,0,397,398,5,110,0,0,398,399,
  	5,116,0,0,399,400,5,66,0,0,400,401,5,117,0,0,401,402,5,102,0,0,402,403,
  	5,102,0,0,403,404,5,101,0,0,404,405,5,114,0,0,405,44,1,0,0,0,406,407,
  	5,115,0,0,407,408,5,108,0,0,408,409,5,111,0,0,409,410,5,116,0,0,410,46,
  	1,0,0,0,411,412,5,83,0,0,412,413,5,104,0,0,413,414,5,97,0,0,414,415,5,
  	100,0,0,415,416,5,101,0,0,416,417,5,114,0,0,417,418,5,84,0,0,418,419,
  	5,121,0,0,419,420,5,112,0,0,420,421,5,101,0,0,421,422,5,32,0,0,422,423,
  	5,61,0,0,423,424,5,32,0,0,424,48,1,0,0,0,425,426,5,86,0,0,426,427,5,101,
  	0,0,427,428,5,114,0,0,428,429,5,116,0,0,429,430,5,101,0,0,430,440,5,120,
  	0,0,431,432,5,70,0,0,432,433,5,114,0,0,433,434,5,97,0,0,434,435,5,103,
  	0,0,435,436,5,109,0,0,436,437,5,101,0,0,437,438,5,110,0,0,438,440,5,116,
  	0,0,439,425,1,0,0,0,439,431,1,0,0,0,440,50,1,0,0,0,441,442,5,59,0,0,442,
  	52,1,0,0,0,443,444,5,44,0,0,444,54,1,0,0,0,445,446,5,58,0,0,446,56,1,
  	0,0,0,447,451,7,3,0,0,448,450,7,4,0,0,449,448,1,0,0,0,450,453,1,0,0,0,
  	451,449,1,0,0,0,451,452,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,454,447,
  	1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,7,4,0,0,457,461,5,46,
  	0,0,458,460,7,4,0,0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,
  	462,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,464,466,5,102,0,0,465,464,
  	1,0,0,0,465,466,1,0,0,0,466,58,1,0,0,0,467,476,5,48,0,0,468,472,7,3,0,
  	0,469,471,7,4,0,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,
  	473,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,475,467,1,0,0,0,475,468,1,
  	0,0,0,476,60,1,0,0,0,477,478,5,61,0,0,478,62,1,0,0,0,479,480,5,46,0,0,
  	480,64,1,0,0,0,481,482,5,64,0,0,482,66,1,0,0,0,483,484,5,43,0,0,484,68,
  	1,0,0,0,485,486,5,45,0,0,486,70,1,0,0,0,487,488,5,42,0,0,488,72,1,0,0,
  	0,489,490,5,47,0,0,490,74,1,0,0,0,491,511,5,37,0,0,492,493,5,61,0,0,493,
  	511,5,61,0,0,494,495,5,33,0,0,495,511,5,61,0,0,496,511,7,5,0,0,497,498,
  	5,62,0,0,498,511,5,61,0,0,499,500,5,60,0,0,500,511,5,61,0,0,501,502,5,
  	38,0,0,502,511,5,38,0,0,503,504,5,124,0,0,504,511,5,124,0,0,505,506,5,
  	60,0,0,506,511,5,60,0,0,507,508,5,62,0,0,508,511,5,62,0,0,509,511,7,6,
  	0,0,510,491,1,0,0,0,510,492,1,0,0,0,510,494,1,0,0,0,510,496,1,0,0,0,510,
  	497,1,0,0,0,510,499,1,0,0,0,510,501,1,0,0,0,510,503,1,0,0,0,510,505,1,
  	0,0,0,510,507,1,0,0,0,510,509,1,0,0,0,511,76,1,0,0,0,512,513,5,43,0,0,
  	513,517,5,43,0,0,514,515,5,45,0,0,515,517,5,45,0,0,516,512,1,0,0,0,516,
  	514,1,0,0,0,517,78,1,0,0,0,518,519,5,33,0,0,519,80,1,0,0,0,520,521,5,
  	116,0,0,521,522,5,114,0,0,522,523,5,117,0,0,523,530,5,101,0,0,524,525,
  	5,102,0,0,525,526,5,97,0,0,526,527,5,108,0,0,527,528,5,115,0,0,528,530,
  	5,101,0,0,529,520,1,0,0,0,529,524,1,0,0,0,530,82,1,0,0,0,531,535,7,7,
  	0,0,532,534,7,8,0,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,
  	536,1,0,0,0,536,84,1,0,0,0,537,535,1,0,0,0,32,0,88,98,102,111,116,183,
  	215,219,226,230,238,242,250,254,263,267,277,281,283,381,439,451,454,461,
  	465,472,475,510,516,529,535,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  srslgrammarlexerLexerStaticData = staticData.release();
}

}

SrslGrammarLexer::SrslGrammarLexer(CharStream *input) : Lexer(input) {
  SrslGrammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *srslgrammarlexerLexerStaticData->atn, srslgrammarlexerLexerStaticData->decisionToDFA, srslgrammarlexerLexerStaticData->sharedContextCache);
}

SrslGrammarLexer::~SrslGrammarLexer() {
  delete _interpreter;
}

std::string SrslGrammarLexer::getGrammarFileName() const {
  return "SrslGrammar.g4";
}

const std::vector<std::string>& SrslGrammarLexer::getRuleNames() const {
  return srslgrammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SrslGrammarLexer::getChannelNames() const {
  return srslgrammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SrslGrammarLexer::getModeNames() const {
  return srslgrammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SrslGrammarLexer::getVocabulary() const {
  return srslgrammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SrslGrammarLexer::getSerializedATN() const {
  return srslgrammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& SrslGrammarLexer::getATN() const {
  return *srslgrammarlexerLexerStaticData->atn;
}




void SrslGrammarLexer::initialize() {
  ::antlr4::internal::call_once(srslgrammarlexerLexerOnceFlag, srslgrammarlexerLexerInitialize);
}
